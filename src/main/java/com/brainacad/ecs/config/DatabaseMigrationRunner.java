package com.brainacad.ecs.config;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

/**
 * Временный компонент для применения миграции базы данных
 * TODO: Удалить после успешного применения миграции
 */
@Component
public class DatabaseMigrationRunner implements CommandLineRunner {
    
    private static final Logger logger = LoggerFactory.getLogger(DatabaseMigrationRunner.class);
    private final DataSource dataSource;

    public DatabaseMigrationRunner(DataSource dataSource) {
        this.dataSource = dataSource;
    }

    @Override
    public void run(String... args) throws Exception {
        logger.info("Starting database migration for 2FA support...");
        
        try (Connection connection = dataSource.getConnection()) {
            // Check if columns already exist
            if (!columnExists(connection, "users", "two_factor_enabled")) {
                logger.info("Adding two_factor_enabled column to users table...");
                executeQuery(connection, 
                    "ALTER TABLE users ADD COLUMN two_factor_enabled BOOLEAN NOT NULL DEFAULT FALSE");
            } else {
                logger.info("Column two_factor_enabled already exists in users table");
            }
            
            if (!columnExists(connection, "users", "preferred_two_factor_method")) {
                logger.info("Adding preferred_two_factor_method column to users table...");
                executeQuery(connection, 
                    "ALTER TABLE users ADD COLUMN preferred_two_factor_method VARCHAR(20) NULL");
            } else {
                logger.info("Column preferred_two_factor_method already exists in users table");
            }
            
            // Create two_factor_tokens table if it doesn't exist
            if (!tableExists(connection, "two_factor_tokens")) {
                logger.info("Creating two_factor_tokens table...");
                String createTableQuery = """
                    CREATE TABLE two_factor_tokens (
                        id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        verification_code VARCHAR(6) NOT NULL,
                        method VARCHAR(20) NOT NULL CHECK (method IN ('EMAIL','PHONE','BOTH')),
                        user_id BIGINT NOT NULL,
                        expires_at TIMESTAMP NOT NULL,
                        used BOOLEAN NOT NULL DEFAULT FALSE,
                        attempts INTEGER NOT NULL DEFAULT 0,
                        max_attempts INTEGER NOT NULL DEFAULT 3,
                        created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                        used_at TIMESTAMP NULL,
                        CONSTRAINT fk_two_factor_tokens_user 
                            FOREIGN KEY (user_id) REFERENCES users(id) 
                            ON DELETE CASCADE
                    )
                    """;
                executeQuery(connection, createTableQuery);
                
                // Create indexes
                logger.info("Creating indexes for two_factor_tokens table...");
                executeQuery(connection, "CREATE INDEX IF NOT EXISTS idx_two_factor_tokens_user_id ON two_factor_tokens(user_id)");
                executeQuery(connection, "CREATE INDEX IF NOT EXISTS idx_two_factor_tokens_expires_at ON two_factor_tokens(expires_at)");
                executeQuery(connection, "CREATE INDEX IF NOT EXISTS idx_two_factor_tokens_used ON two_factor_tokens(used)");
                executeQuery(connection, "CREATE INDEX IF NOT EXISTS idx_two_factor_tokens_user_code ON two_factor_tokens(user_id, verification_code)");
            } else {
                logger.info("Table two_factor_tokens already exists");
            }
            
            logger.info("Database migration completed successfully!");
            
        } catch (SQLException e) {
            logger.error("Error during database migration: ", e);
            throw new RuntimeException("Failed to apply database migration", e);
        }
    }
    
    private boolean columnExists(Connection connection, String tableName, String columnName) throws SQLException {
        String query = """
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = ? AND column_name = ?
            """;
        try (PreparedStatement statement = connection.prepareStatement(query)) {
            statement.setString(1, tableName);
            statement.setString(2, columnName);
            return statement.executeQuery().next();
        }
    }
    
    private boolean tableExists(Connection connection, String tableName) throws SQLException {
        String query = """
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_name = ?
            """;
        try (PreparedStatement statement = connection.prepareStatement(query)) {
            statement.setString(1, tableName);
            return statement.executeQuery().next();
        }
    }
    
    private void executeQuery(Connection connection, String query) throws SQLException {
        try (PreparedStatement statement = connection.prepareStatement(query)) {
            statement.executeUpdate();
            logger.debug("Successfully executed query: {}", query);
        }
    }
}
